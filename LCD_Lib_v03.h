// Библиотека для работы с текстовым 2х16 LCD на базе контроллера KS0066U или аналогов
// v0.3.0_2012-05-29
// Тестовая платформа: отладочная плата EasyPIC 6
// Зависимости: функции Delay_us(), Delay_ms() среды microC PRO for PIC
// Автор: Егор Змушко
// Рефакторинг: А.В. Цурко (Ratgor) [не проводился]

//Выбор порта подключение для LCD
#define LCD_Tris TRISB
#define LCD_Port PORTB
//Выбор порядка по порту линий RS и E
#define RS 4
#define E 5


#define _CLEAR 0x01  //Команда применяется при очистке LCD (передается как аргумент функции LCD_Send_Cmd())

//Прототипы функций
void LCD_Init(void);
void LCD_Send_Cmd (unsigned char source);
void LCD_Goto (unsigned char line, unsigned char offset);
void LCD_Send_Chr (unsigned char source);
void LCD_Send_Text (char *text);

//Функция инициализации портов для работы с LCD и самого контроллера LCD
void LCD_Init(void){

     //Настройка порта, к которому подключен LCD, на выход
     LCD_Tris = 0x00;
     LCD_Port = 0x00;
     
     //Задержка необходимая для установки всех уровней сигналов на порте, к которому подключен LCD
     Delay_ms(40);
     
     //Команда для перевода LCD в 4-х битный режим работы (начальная установка)
     LCD_Send_Cmd(0x22);
     //Задержка необходима на выполнения отправленной команды
     Delay_us(39);
     //Команда для  инициализации LCD как двухсрочного, 
	 //установка размера символов 5х8 (отправляется 2 раза)
     LCD_Send_Cmd(0x28);
     //Задержка необходима на выполнения отправленной команды
     Delay_us(39);
     //Команда для  инициализации LCD как двухсрочного, 
	 //установка размера символов 5х8 (отправляется 2 раза)
     LCD_Send_Cmd(0x28);
     //Задержка необходима на выполнения отправленной команды
     Delay_us(37);
     //Включение LCD, отключение курсора и мигания курсора
     LCD_Send_Cmd(0x0C);
     //Задержка необходима на выполнения отправленной команды
     Delay_us(37);
     //Команда очистки LCD и установка курсора в начало экрана
     LCD_Send_Cmd(0x01);
     //Задержка необходима на выполнения отправленной команды
     Delay_us(1530);
     //Команда выбора направления сдвига курсора и всего экрана (курсор движется
     //слева на право)
     LCD_Send_Cmd(0x06);
  
}


//Функция отправки команды в 4 битном режиме работы
void LCD_Send_Cmd (unsigned char source){

     //Установка в 0 вывода RS, что означает передачу команды
     LCD_Port &= ~(1<<RS);
     
     //В source храниться байт команды. При работе в 4 битном режиме, в начале
     //передается старший полубайт. В начаде он выставляется на 4 выводах контроллера,
     //а по спаду сигнала на выводе E происходит запись в контроллер LCD
     //Анологично происходит и с младшей частью байта команды
     LCD_Port |= 0x0F & (source>>4);
     LCD_Port |= (1<<E);
     Delay_us(3);
     LCD_Port &= ~(1<<E);
     Delay_us(1);
     //Так как для установки битов в порте используем битовую маску, то
     //перед применением этой маски, нужно очистить ту часть байта куда
     //будем писать данные(первые 4 бита)
     //Очистка порта LCD
     LCD_Port &= 0xF0;
     //Передача младшего полубайт аналогична как и для старшего
     LCD_Port |= 0x0F & source;
     LCD_Port |= (1<<E);
     Delay_us(3);
     LCD_Port &= ~(1<<E);
     Delay_us(1);
     //Очистка порта LCD
     LCD_Port = 0x00;
     //Время, необходимое на выполнение команды(взято по максиму для команды Clear)
     Delay_us(1500);

}

//Функция установки курсора экрана
//В качестве аргументов для функции передается 2 числа:
//первое число является номером строки(1 или 2), второе число - позиция в этой сроке(1-16)
void LCD_Goto (unsigned char line, unsigned char offset){
        
        //Выбор адреса строки в зависимости от переданного в функцию номера
        switch(line){
                case 1:  line = 0x80; break;
                case 2:  line = 0xC0; break;
                default: line = 0x80; break;
        }

        //Проверка величины позиции на попадание в допустымые пределы
        //Если позиция = 0 или больше 16, то позиция = 1
        if((offset == 0) || (offset > 16)){
                  offset = 1;
        }
        //Передаем адрес установки курсора
        LCD_Send_Cmd((line-1)+offset);

}

//Функция вывода одного символа на экран
//Функция аналогична с функцией передачи команд, за исключением того,
//что при передаче данных мы устанавливаем RS = 1
void LCD_Send_Chr (unsigned char source){


     //Установка в 1 вывода RS, что означает передачу данных
     LCD_Port |= (1<<RS);

     LCD_Port |= 0x0F & (source>>4);
     LCD_Port |= (1<<E);
     Delay_us(3);
     LCD_Port &= ~(1<<E);
     Delay_us(1);

     LCD_Port &= 0xF0;

     LCD_Port |= 0x0F & source;
     LCD_Port |= (1<<E);
     Delay_us(3);
     LCD_Port &= ~(1<<E);
     Delay_us(1);

     LCD_Port = 0x00;

     Delay_ms(1);
}

//Функция вывода на экран строки символов
//В качестве функции отправки используется функция отправки одного символа
//При заполнении одной строки переноса на другую строку не происходи - следует это учитыват при работе с этой функцией
//и выполнят операцию переноса вручную
void LCD_Send_Text (char *text){
        unsigned char i;

        //Отправка символа выбранного из строки, пока не встретиться '\0'
        for(i=0;text[i];i++){
              LCD_Send_Chr(text[i]);
        }
}
